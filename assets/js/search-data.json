{
  
    
        "post0": {
            "title": "How to deploy a Django Project to Heroku",
            "content": "Deploy a Django Project to Heroku :rocket: . Prereqs :white_check_mark: . I ’ll assume that you have the familiarity with the Django , git and have a project ready to deploy with it’s requirements.txt file. And read my article on Inital setting up Meanwhile :thought_balloon: wondering how to deploy so you can demo it to someone or just deploy. . Heroku :cloud: . Heroku is a cloud :cloud: application platform, a Platform-as-a-Service (PaaS). I feel Heroku is a great option to deploy our side projects and demos as a hobby dev. Also, it has PostgreSQL Relational Database to try out free. . Create an Account :checkered_flag: . If you don’t already have an account Please Sign up here for an account. It’s free and simple. . Install the Heroku CLI :checkered_flag: . curl https://cli-assets.heroku.com/install.sh | sh . if you want to know more on how to install CLI please check here . Shaping up the Project for Heroku deploy . Heroku needs the information about our app to run.So We have to do few changes and add some files to our project. . Gunicorn :gift: . Gunicorn ‘Green Unicorn’ is a Python WSGI HTTP Server for UNIX. It helps the Heroku to deploy our application across various “workers.” . so in our requirements.txt we have to add gunicorn. and if you want to locally install you can . pip install gunicorn . also if you already don’t have a requirements.txt .You can create one by . pip freeze &gt; requirements.txt . in your virtual environment. . Procfile :checkered_flag: . Procfile is unique for heroku. We have to add it in our project’s root directory.It basically tells Heroku, how our app should start and run. . You can manually create a procfile add following lines . web: gunicorn config.wsgi --log-file - . or run . echo &#39;web: gunicorn config.wsgi --log-file -&#39; &gt; Procfile . Here config is my app which has the wsgi.py file.If you read my article here.You will know why i name my app as config. . So here we are telling heroku it’s a web app with gunicorn server and the starting point is wsgi.py from config dir or app. . So don’t forget to replace it with your_project_name.wsgi . Django-heroku :gift: . Heroku has created a python module called django-heroku that helps with settings, testing, and logging automatically. same as Gunicorn it also has be to added to our requirements.txt as django-heroku. we have add these two lines to our settings.py. first import it at the top . import django_heroku . and in the bottom call the method. . django_heroku.settings(locals()) . STATIC_ROOT :checkered_flag: . So again in settings.py let’s add some changes below the variable called STATIC_URL. Let’s add the STATIC_ROOT . STATIC_URL = &#39;/static/&#39; STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;) . and some people create project directory as PROJECT_DIR variable and use it instead of BASE_DIR.So it will be . PROJECT_DIR = os.path.dirname(os.path.abspath(__file__)) STATIC_URL = &#39;/static/&#39; STATIC_ROOT = os.path.join(PROJECT_ROOT, &#39;static&#39;) . To serve static files we need whitenoise :gift: . We need to add whitenoise to our requirements.txt file as well to serve the static files. . To install in environment . pip install whitenoise . Now edit the settings.py file and add WhiteNoise to the MIDDLEWARE list as following. . MIDDLEWARE = [ &#39;django.middleware.security.SecurityMiddleware&#39;, &#39;whitenoise.middleware.WhiteNoiseMiddleware&#39;, # ... ] . The WhiteNoise middleware should be placed directly after the Django SecurityMiddleware and before all other middleware. . now add it below STATIC_ROOT in the the settings.py . . STATICFILES_STORAGE = &#39;whitenoise.storage.CompressedManifestStaticFilesStorage&#39; . Database settings using dj-database-url :gift: . Add the following to the bottom of settings.py: . import dj_database_url DATABASES[&#39;default&#39;] = dj_database_url.config(conn_max_age=600, ssl_require=True) . here you can find more on my article on that and also heroku docdoc and add psycopg2-binary and dj-database-url to your requirements.txt file as well. . runtime.txt :checkered_flag: . We have to create a file runtime.txt in the project root to specify the correct Python version . If you use cli it will be . echo &#39;python-3.8.2&#39; &gt; runtime.txt . or you can create the file using ide and mention your python version. . Deployment :rocket: . First git commit the changes . . Login to heroku :checkered_flag: . Inside out project root . heroku login . It will ask to click a link to login using web browser . . create a Heroku App :checkered_flag: . heroku create demo-app . Add a PostgreSQL database to your app :gem: . heroku addons:create heroku-postgresql:hobby-dev . You have to go your Heroku Dashboard and access your recently created app (demo-app). . Click on the Settings menu and then on the button Reveal Config Vars and your SECRET_KEY below the database url and DEBUG to false if it’s not default false. . deploy :rocket: . git push the app . now push the commited git to heroku master . git push heroku master . maigrate database . heroku run migrate . You have deployed your app now :tada: :tada: :tada: . Quick Note :warning: . I did this post while i was deploying incase if you find any mistake or stuck please let me know on twitter or . :envelope: email .",
            "url": "https://kekayan.github.io/notes/django/python/2020/05/23/django-deploy-to-heroku.html",
            "relUrl": "/django/python/2020/05/23/django-deploy-to-heroku.html",
            "date": " • May 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Django Abstract Model as Base Model",
            "content": "Django Abstract Model . Let’s understand the value of Django abstract model by a sample use case. Imagine a scenario where we are building a Dog Management App. Let’s think our main models are . dog | owner | . So we will create two apps for example dog and owner . django-admin startapp dog django-admin startapp owner . While designing the data model, there is a requirement to save with created date and update date for both to audit the creation and modification. Since it is a common best practice . Usually what you will think, . for owner, it will be . class Owner(models.Model): id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) name = models.CharField(max_length=150) # including these two fields in each model created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) def __str__(self): return self.name . and our models for Dog, it will be . class Dog(models.Model): id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) name = models.CharField(max_length=150) owner =models.ForeignKey(Owner, on_delete=models.CASCADE) # including these two fields in each model created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) def __str__(self): return self.name . as you noticed we have included the both created date and update date fields for each model . . With the knowledge of OOP, we can approach this in a better way. Abstract classes in Django is the answer to the above situation We can first create a Date Aware Abstract model as a base and then extend it to other models without repeating it. To create an Abstract model in Django we have to add the Meta class to our model and set abstract is true. . class DateAwareModel(models.Model): created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) class Meta: abstract = True . Why Abstract Model . The abstract Model won’t have a table for it self or in other words django won’t generate tables for abstract models.So we can use the fields by inheriting it in as many models we want without repeating it. . Now our Dog model will inherit DateAwareModel . class Dog(DateAwareModel): id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False) name = models.CharField(max_length=150) def __str__(self): return self.name . same for the Owner Model in addition to mentioned fields it now have created_at and updated_at from DateAwareModel. . auto_now &amp; auto_now_add . created_at = models.DateTimeField(auto_now_add=True) updated_at = models.DateTimeField(auto_now=True) . auto_now_add - updates on creation only auto_now - updated to the current timestamp every time an object is saved or modified. . Meanwhile if you find any mistake please let me know . :envelope: email .",
            "url": "https://kekayan.github.io/notes/django/python/2020/05/20/django-abstract-model.html",
            "relUrl": "/django/python/2020/05/20/django-abstract-model.html",
            "date": " • May 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Django Project and Settings Customizations",
            "content": "Django . Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Usually, when I start a Django project I do a few customizations. So today I wanted to note it down that so I can refer later and others will also find useful. And I also assume that you have familiar with Django and Anaconda or other virtual environments. . Restructure . Let’s start a new project by executing django-admin’s startproject command in the python virtual environment. . django-admin startproject config . Now the directory structure will be . rootdir │ └───config │ manage.py │ └───config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . As a first step, I will restructure dir by taking out inner config and manage.py to the root dir. . rootdir │ manage.py └──config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . or this can be done easily by executing . django-admin startproject config . . in the project dir itself. . Settings.py . Let’s see the modifications I usually do in the settings.py. Because we need to decouple our settings from our environments. Also, there are many ways to achieve. I will start with the simplest and effective ones. Let’s install two more python packages . pip install python-decouple pip install dj-database-url . why python-decouple . Web apps have different environments params. For example, in Django database URL, password, secret key, debug status, email host, allowed hosts will take different values for dev environment to the production environment. One of the best practice is decoupling them from the actual application. Python Decouple package is doing exactly that by separating the settings parameters from the source code. . First create a file named .env in the root of the project. . rootdir │ .env │ manage.py └──config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . Now in .env file we can add our environment variables. For example our .env file will look like this. . DEBUG=True SECRET_KEY=4drn&amp;9w92v8=vrz2de2)0 SERVER=* DATABASE_URL=sqlite:///db.sqlite3 . DON’T COMMIT YOUR .env FILE TO PUBLIC GITHUB repo. . Now in settings.py we can import the decouple and set the params to be taken from our .env file. . from decouple import config . Now I can use the config function from decouple module to read the .env file and the params we set. The config method will take extra arguments to define a default value as below incase if it couldn’t find the parm in .env. Also, another argument called cast for the type of params. It can transform our String params value to cast argument type . SECRET_KEY = config(&#39;SECRET_KEY&#39;,default=&#39;S#perS3crEt_1122KKKK&#39;) DEBUG = config(&#39;DEBUG&#39;, default=False,cast=bool) ALLOWED_HOSTS = [&#39;localhost&#39;, &#39;127.0.0.1&#39;, config(&#39;SERVER&#39;, default=&#39;127.0.0.1&#39;)] . why dj-database-url . Like I already said we will have different databases for our dev to prod environments. So we need to decouple it as well. That’s where dj-database-url coming to rescue. The dj_database_url.config method returns a Django database connection dictionary, populated with all the data specified in our URL. There is also a conn_max_age argument to easily enable Django’s connection pool. So now we only need to define our URL in the .env file. . import dj_database_url . DATABASES = { &#39;default&#39;: dj_database_url.config( default=config(&#39;DATABASE_URL&#39;) ) } . now we can set urls in the .env . DEBUG=True SECRET_KEY=4drn&amp;9w92v8=vrz2de2)0 SERVER=* DATABASE_URL=sqlite:///db.sqlite3 . Django Secret Key . Incase if you want to change the secret key. The easiest way to generate a secret key is by using Django itself. Django generates a secret key every time when we create a new project. We can use that function as below . from django.core.management.utils import get_random_secret_key print(get_random_secret_key()) . one liner . python -c &#39;from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())&#39; . Next . I have added the STATIC file serving and Deployment to Heroku on this note . Meanwhile if you find any mistake please let me know . :envelope: email .",
            "url": "https://kekayan.github.io/notes/django/python/2020/05/19/django-customization.html",
            "relUrl": "/django/python/2020/05/19/django-customization.html",
            "date": " • May 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "If describe me in one word, :thought_balloon: that would be Creatambitionate :wink: (Creative, Ambitious and Passionate). I am a total tech nerd. I simply love new tech and the field I am in now. Looking at the world with a technological eye, to see how can I help people using the knowledge I gain through past years as a Research &amp; Devlopment Software Engineer and as a graduate of BSc.(Hons) Software Engineering :mortar_board: from the University of Kelaniya. . I worked in different projects with different tech stacks while learning about complex architectural concerns along the way. My “thing” was solving problems. If I mention some of my tech stack (just for the formalities :wink: ) . . Languages: Python, JavaScript, Java | Frameworks: FastAPI, Flask, Django, SpringBoot,ReactJs | Databases: DynamoDB, MySQL, Postgresql, MongoDB | DeepLearning: Vision &amp; NLP, Tensorflow, Keras, Pytorch | Cloud: AWS, Docker, Kubernetes | Operating system: Linux | Others: Redis, Guicorn, Tomcat, Nginx, Ansible | Tools: Git(BitBucket&amp;Github..), Colab, Postman | . As I said, I work in this field because it is my passion. I love the people I meet in the industry, I love the conversations we make, the ideas people have, the different point of views they share about the same problem in hand. Simply I love the creativity of the industry I work in. I want to use my profession to help people in any way I can. I may be just one individual, but a group of like-minded people like us can do something better to this world, so let’s connect! :heart: .",
          "url": "https://kekayan.github.io/notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kekayan.github.io/notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}