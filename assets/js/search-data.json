{
  
    
        "post0": {
            "title": "How do i start a Django Project",
            "content": "Django . Restructure . Let’s start a new project by executing django-admin’s startproject command .I will name the project as config. So i will execute following command in my python virtual environment. shell django-admin startproject config . . Now the directory structure will be . rootdir │ └───config │ manage.py │ └───config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . first thing i am going to do is restructure the dir by taking out inner config and manage.py to root. . rootdir │ manage.py └──config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . Settings.py . I am going to install three more python packages . pip install python-decouple pip install dj-database-url . python-decouple . Web apps have different environments params.For example in Django database url, password, secret key, debug status, email host, allowed hosts. Best thing to do is decouple them from actual application. Python Decouple is doing exactly that by separating the settings parameters from the source code. . First create a file named .env in the root of the project. . rootdir │ .env │ manage.py └──config │ __init__.py │ settings.py │ urls.py │ wsgi.py │ asgi.py . Now in .env we can add our environment variables. For example our .env file looked like this. . DEBUG=True SECRET_KEY=4drn&amp;9w92v8=vrz2de2)0 SERVER=*.herokuapp.com DATABASE_URL=sqlite:///db.sqlite3 . DON’T COMMIT YOUR .env FILE TO PUBLIC GITHUB repo. . Now in settings.py we can import the decouple and set the params to be taken from our .env file. . from decouple import config import dj_database_url . We can add an extra argument to the config function, to define a default value as below incase if it couldn’t be found in .env. Also another argument called cast for the type. It can transform our String to mentioned type . SECRET_KEY = config(&#39;SECRET_KEY&#39;,default=&#39;S#perS3crEt_1122KKKK&#39;) DEBUG = config(&#39;DEBUG&#39;, default=False,cast=bool) ALLOWED_HOSTS = [&#39;localhost&#39;, &#39;127.0.0.1&#39;, config(&#39;SERVER&#39;, default=&#39;127.0.0.1&#39;)] DATABASES = { &#39;default&#39;: dj_database_url.config( default=config(&#39;DATABASE_URL&#39;) ) } . dj-database-url . Above you have seen already we used dj-database-url while setting database environment variable. The dj_database_url.config method returns a Django database connection dictionary, populated with all the data specified in your URL. There is also a conn_max_age argument to easily enable Django’s connection pool. . Django Secret Key . The easiest way to generate a secret key is using django it self.Django generates a secret key every time when we create a new project. We can use that function as below . from django.core.management.utils import get_random_secret_key print(get_random_secret_key()) . one liner . python -c &#39;from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())&#39; . Next . I will write on static files serving for heroku and other things when i get time. . Meanwhile if you find any mistake please let me know . :envelope: email .",
            "url": "https://kekayan.github.io/notes/django/python/2020/05/19/djang-getting-started.html",
            "relUrl": "/django/python/2020/05/19/djang-getting-started.html",
            "date": " • May 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "If describe me in one word, :thought_balloon: that would be Creatambitionate :wink: (Creative, Ambitious and Passionate). I am a total tech nerd. I simply love new tech and the field I am in now.Looking at the world with a technological eye, to see how can I help people using the knowledge I gain through past years as a graduate of BSc. Software Engineering :mortar_board: from the University of Kelaniya. . So far the best part of my career was my one-year internship as a Research Engineer in Pearson Lanka Pvt. Ltd. I worked in different projects with different tech stacks while learning about complex architectural concerns along the way. My “thing” was Machine Learning and Deep Learning. But Pearson gave me the chance to grow as a full-stack dev as well. If I mention some of my tech stack (just for the formalities :wink: ): . Languages: Java, Python, JavaScript | Frameworks: SpringBoot, Flask, Django, ReactJs, VueJs | Databases: MySQL, SqlServer, MongoDB | DeepLearning: Vision &amp; NLP, Tensorflow, Keras | Cloud: AWS, Kubernetes, Docker | Operating system: Linux, Windows | Network&amp;Deployment: Guicorn, Tomcat, Nginx, Ansible | Tools: Git(BitBucket&amp;Github), Colab, Postman | . As I said, I work in this field because it is my passion. I love the people I meet in the industry, I love the conversations we make, the ideas people have, the different point of views they share about the same problem in hand. Simply I love the creativity of the industry I work in. I want to use my profession to help people in any way I can. I may be just one individual, but a group of like-minded people like us can do something better to this world, so let’s connect! :heart: .",
          "url": "https://kekayan.github.io/notes/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kekayan.github.io/notes/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}